
Express:
    - Application framework, light weight, used for web-app dev
    - Can imagine as abstraction on top of http
    - It sets up a routing table internally to dynamically render html pages based on input
  1.)Routing:
    Defines end points/ URIs for an application.
    Routing method:
    Methods using http verbs that defines the action to be taken in a particular end point
    
    const express = require('express');
    const app = express();//rounte
    //app.listen(4000);// Server starts in port 4000. If no port mensioned, application terminates, eventhough no error printing.
    //better way
    app.listen(4000, ()=>{console.log('started')});-> helful to add a callback at the time of server starting
    app.listen(4000, ()=>{console.log('started');}).on('error', ()=>{console.log('Failed to start')});-> this will show error message properly on address in use etc.
    app.get'/getter', (req, resp)=>{//callback funcation similar for all routing methods
     resp.send('message');//no need of write() then end(). This will handing everything.
    });
    
  2.)Middlewares:
    Have req, res, next.
    Instead of using a single callback funcation, express can rounte the req into multiple functions.
    They are called middlewares.
    app.get('/test', (req, res, next)=>{
      console.log('L1');
      next(); -> This will rediect req and resp to the next funcation, L2.
    }, (req, res)=>{}console.log('L2');
    res.send('Done');});-> send is required to close the stream. Else, rotates and time out.
    If we call next() from L2 without passing next, error comes.
    app.get('/test', (req, res, next)=>{
	      console.log('Level 1');
	      next();
	      res.send('Done at L1');
    }, (req, res)=>{
	      console.log('Level 2');
	      res.send('Done at L2');
    });-> prints L1, L2 and returns Done at L2 to front. But error comes at  res.send('Done at L1'); as it tries sending again.
    If we give send() and then next(); streams closes and returns that send()'s content. But next() call gets exeuted.
    ie;
    app.get('/test', (req, res, next)=>{
	      console.log('Level 1');
	      next();
	      res.send('Done at L1');
    }, (req, res)=>{
	      console.log('Level 2');
	      res.send('Done at L2');
    });-> Here, res.send('Done at L1'); will close the stream and gives back. But next() calls annd prints L2 also. 
    But in send() of L2, it gives error. Front end all fine. But backend error.
  3.)Error Hnadling:
      1.) When url is wrong.
      Routing table is created based on order in which code for http verbs are written.
      So, if we add something at the end, just before listen(), it will act as default. So;
      app.use((req, res, next)=>{res.send('Error')}); will work for 404 errors, 405 etc.
      2.) When an exception/ error happends inside a route,
      need to handle that also.
      app.use((err, req, res, next)){res.send('error')}; -> will work in that case. Give this before app.use((req, res, next)=>{res.send('Error')}); 
      next(anything); -> will be treated as error and control goes to app.use((err, req, res, next)) if defined.
      
 4.)Middlewares can be added as , separated funcations, array of funcations or mix of both.
      app.get('/test', (req, res, next)=>{console.log('l1'); next();}, (req, res, next)=>{console.log('l1'); next();}, (req, res)=>{console.log('l1');res.send('Done');}); -> prints
      =
      const f1 = (req, res, next)=>{console.log('l1'); next();};
      const f2 = (req, res, next)=>{console.log('l2'); next();};
      const f3 = (req, res)=>{console.log('l3'); res.send('Done');};
      app.get('/test', [f1, f2, f3]);
      =
      const f1 = (req, res, next)=>{console.log('l1'); next();};
      const f2 = (req, res, next)=>{console.log('l2'); next();};
      app.get('/test', [f1, f2], (req, res)=>{console.log('l3'); res.send('Done');});
 5.)Stream closing:
      //res.send('Got & done');
      //res.end();
      //res.download();
      //res.json({"message":"hai"});
      //res.redirect();
      //res.sendFile('pakage.json');
      //res.jsonp("<script>abc</script>"); -> json with padding. used before cors came
      will be able to close the response stream/ req-res cycle. Else, it will be timed waiting
 6.)express.Router() -> called min-app as its giving attachable routes
      For more modularity
      Avoids typo and redundancy
      But app.get(), app.route() etc are called route handlers.route() will not accept url and then thatb route.get() etc will not accept urls. 
      It accepts only a funcation. ie; app.route('/test').get(()=>{//something});
      express.Router() is rounter.
      Router vs Route Handlers:
      -------------------------
      Routers gives more modularity.
      But they cannot exist alone since they don't have listen() capability.
      Route handlers have that capability and handlers can attach multiple routes into it.
      Router() returns Router which will be capable of to create pluggable, modular, ready to mount routes.
      express() and express.Router() are not the same. First one is app(handler) and second one is mini-app(router)
      
 7.)Middleware Funcations:
      Funcations with req, resp, next args.
      Can modify req,res
      Can end req-res cycle
      Can call another middleware funcation
      Can execute any code
      Route level middleware - inside a router. So, only in specific route it is applicable.
      Application level middleware - with app.
      Error Handling Middleware:
      Will have 4 parameters.
      app.use((error, req, res, next)=>{
    	console.error(error.stack);
    	res.status = 500;
    	res.send({'message': "Internal error in app"});
      });
      -> What will happen if we give next() call inside error handler?
      		Control will go to the next possible middleware. Eg: if use() or all() is given to be executed after api call
      There are many built-in middlewares. Previously it was within express. Not those are independent packages except express.static.
      1.)express.static(route, options);
      
      
      
