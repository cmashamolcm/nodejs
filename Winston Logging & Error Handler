1.) Winston logging package is to log details into console, file, socket etc.
2.) npm install winston --save
3.) const winston = require('winston');
    const console = new winston.transports.Console({
                  level: 'info'
                });
    const dateFormat = ()=>{
      return new Date(Date.now().toString());
    }
    const file = new winston.transports.File({
                    level: 'error',// high priority than of logger level for transport level.
                    filename: 'app.log',
                    dirname:'.',
                    format: winston.format.printf(
                    return `${dateFormat()} | ${info.level.toUpperCase()} | 'app.log' | ${info.message} | `
        message = info.obj ? message + `data:${JSON.stringify(info.obj)} | ` : message
        message = this.log_data ? message + `log_data:${JSON.stringify(this.log_data)} | ` : message);
                  });
    const options = {
                      transports: [console, file],
                      level: 'debug'// only small letters. Top level. Applys to all transports. But each of the transport can override this in it's option.
                    }
     const logger = new winston.createLogger(options);
     logger.info('Test info');
     logger.log('error', 'Test error');
4.) ErrorHandler package is to provide a more sophisticated stack trace. It can be used as a middleware which can respond with a formatted stack trace.
    Eg:
    For an express app;
    If we have a url as below;
    app.get('/exception', (req, res)=>{
        throw Error('Exception testing');
    });
    While accessing http://localhost:1000/exception, we will get
    Error: Exception testing
    at /Users/abc/WorkSpace/Learning/company-portal-node/api/index.js:24:11
    at Layer.handle [as handle_request] (/Users/abc/WorkSpace/Learning/company
    which is provided by express itself with a default handler.
    But if we add;
    npm install --save errorhandler
    const errorHandler = require('errorhandler');
    app.use(errorHandler(/*{dumpExceptions: true, showStack: true }*/));
    It will give a properly formatted stack trace including error code as shown below.
    Connect
    500 Error: Exception testing
           at /Users/abc/WorkSpace/Learning/company-portal-node/api/index.js:24:11
5.) Error-Hnadler package is used with http for server side error management. It can be considered as the ancestor of these errorhandler middleware.
    npm install --save error-handler
    Then;
    const http = require('http');
    const error_handler = require('error-handler');
    http.createServer((req, res)=>{
        error_handler(req, res, callback);
        throw new Error('Error occured...@ server');
    }).listen(2000);
    callback = (req, res)=>{
        res.writeHead(502, {'Content-Type': 'text/html'});
        res.end(
        '<html>' +
          '<head><title>Error</title></head>' +
          '<body><p style="white-space: pre">' + 'Hello error ' + '</p></body>' +
        '</html>'
      )
    }
    
    This will respond to the call, http://localhost:2000
    Erro code will come as 502 since mentioned in response head
    <html>
        <head>
	        <title>Error</title>
        </head>
        <body>
	        <p style="white-space: pre">Hello error </p>
        </body>
    </html>
    
